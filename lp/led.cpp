#include "led.h"
using namespace std;

static const unsigned char aucCRCHi[] =
{
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40
};
static const unsigned char aucCRCLo[] =
{
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
	0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
	0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
	0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
	0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
	0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
	0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
	0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
	0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
	0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
	0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
	0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
	0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
	0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
	0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
	0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
	0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
	0x41, 0x81, 0x80, 0x40
};

LED::LED()
{
	buffer_ = new BYTE[MAX_DATA_LEN];
}

LED::~LED()
{
	delete[]buffer_;
}

bool LED::ShowCommand()
{
	int i = 0, t;
	char temp;
	BYTE line_num, color, time, mod;
	string context;
	int color2[8], color3[2], date[6];
	char mode[] = {
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13
	};
	unsigned char line[] = { 0x00,0x01,0x02,0x04,0x08 };
	system("cls");
	cout << "请输入要执行的命令: " << endl
		<< "0 - 设置时间	1 - 设置广告" << endl
		<< "2 - 彩色显示	3 - 取消显示" << endl
		<< "4 - 定时显示	5 - 时间显示" << endl
		<< "6 - 广告换页	7 - 字符颜色" << endl
		<< "8 - 行色变换	9 - 字色变换" << endl
		<< "10 - 退出" << endl;
	cin >> i;
	switch (i)
	{
	case 0:
		cout << "请输入日期 (年月日时分秒, 年+2000即为年份) : ";
		for (int i = 0; i < 6; i++)
		{
			cin >> date[i];
		}
		SetTime(date);
		return true;
	case 1:
		cout << "请输入行号: (3/4)";
		cin >> temp;
		line_num = temp - '0';
		cout << "请输入字体颜色 (1 - 红色, 2 - 绿色, 3 - 黄色) :";
		cin >> temp;
		color = temp - '0';
		cout << "1 - 输入广告内容, 2 - 清除广告 : ";
		cin >> i;
		context[0] = 0x00;
		if (i == 1)
		{
			cout << "请输入广告内容: ";
			cin >> context;
		}
		SetAd(line_num, color, context);
		return true;
	case 2:
		cout << "请输入行号: (3/4)";
		cin >> temp;
		line_num = temp - '0';
		cout << "请输入显示时间 (0-255) : ";
		cin >> t;
		time = t;
		cout << "请输入字体颜色 (1 - 红色, 2 - 绿色, 3 - 黄色) :";
		cin >> temp;
		color = temp - '0';
		cout << "请输入显示内容: ";
		cin >> context;
		ColoredDisplay(line_num,time,color,context);
		return true;
	case 3:
		cout << "请输入要取消的行号: (3/4)";
		cin >> i;
		while (i < 2 || i>5)
		{
			cout << "无效的行号, 请重新输入: ";
			cin >> i;
		}
		CancelDisplay(line[i]);
		return true;
	case 4:
		cout << "请输入行号: (3/4)";
		cin >> temp;
		line_num = temp - '0';
		cout << "请输入显示时间 (0-255) : ";
		cin >> t;
		time = t;
		cout << "请输入字体颜色 (1 - 红色, 2 - 绿色, 3 - 黄色) :";
		cin >> temp;
		color = temp - '0';
		cout << "请输入显示内容: ";
		cin >> context;
		TimingDisplay(line_num, time, color, context);
		return true;
	case 5:
		cout << "请输入行号 (0/3/4, 0为不显示时间) : ";
		cin >> temp;
		line_num = temp - '0';
		cout << "请输入字体颜色 (1 - 红色, 2 - 绿色, 3 - 黄色) :";
		cin >> temp;
		color = temp - '0';
		TimeDisplay(line_num, color);
		return true;
	case 6:
		cout << "请输入行号: (3/4)";
		cin >> temp;
		line_num = temp - '0';
		cout << "请输入换页模式" << endl
			<< "0 - 从右往左滚动模式" << endl
			<< "1 - 下翻页(移动)" << endl
			<< "2 - 下翻页(覆盖)" << endl
			<< "3 - 下翻页(清除)" << endl
			<< "4 - 下翻页(空白)" << endl
			<< "5 - 上翻页(移动)" << endl
			<< "6 - 上翻页(覆盖)" << endl
			<< "7 - 上翻页(清除)" << endl
			<< "8 - 上翻页(空白)" << endl
			<< "9 - 左画刷(覆盖)" << endl
			<< "10 - 左画刷(清除)" << endl
			<< "11 - 右画刷(覆盖)" << endl
			<< "12 - 右画刷(清除)" << endl
			<< "13 - 开门式(覆盖)" << endl
			<< "14 - 开门式(清除)" << endl
			<< "15 - 关门式(覆盖)" << endl
			<< "16 - 关门式(清除)" << endl
			<< "17 - 页切换模式" << endl
			<< "18 - 从右进入的页切换模式" << endl
			<< "19 - 定屏模式" << endl;
		cin >> i;
		mod = mode[i];
		SetAdChangeMode(line_num, mod);
		return true;
	case 7:
		cout << "请输入行号 (3/4) : ";
		cin >> temp;
		line_num = temp - '0';
		cout << "请输入每个字节的颜色 (1 - 红色, 2 - 绿色, 3 - 黄色) : ";
		for (int i = 0; i < 8; i++)
		{
			cin >> color2[i];
		}
		SetCharColor(line_num, color2);
		return true;
	case 8:
		cout << "请输入行号 (3/4) : ";
		cin >> temp;
		line_num = temp - '0';
		LineColorTrans(line_num);
		return true;
	case 9:
		cout << "请输入行号 (3/4) : ";
		cin >> temp;
		line_num = temp - '0';
		cout << "请输入前景色和背景色 (1 - 红色, 2 - 绿色, 3 - 黄色) : ";
		for (int i = 0; i < 2; i++)
		{
			cin >> color3[i];
		}
		CharColorTrans(line_num, color3);
		return true;
	default:
		return false;
	}
}

void LED::SetAd(BYTE line_num, BYTE color, string context)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	data[size++] = line_num;
	data[size++] = color;
	data[size++] = 0x00;
	if (context[0]!=0x00)
	{
		memcpy(data + size, context.c_str(), context.size());
		size += context.size();
	}
	PackageCommand(COM_SET_AD, data, size, buffer_, &size_);
	delete[]data;
}

void LED::PackageCommand(Command com, BYTE* data, int size, BYTE* buffer, int *length)
{
	BYTE* cursor = buffer;
	BYTE len[2] = { size>>8,size<<8>>8 };
	// 拼包头
	memcpy(cursor, CTRL_HEADER, 2);
	// 拼保留字
	cursor += 2;
	memcpy(cursor, CTRL_RESERVED, 3);
	// 拼命令
	cursor += 3;
	*cursor = com;
	// 拼长度
	cursor += 1;
	memcpy(cursor, len, 2);
	// 拼数据
	cursor += 2;
	memcpy(cursor, data, size);
	// 拼校验和
	BYTE t[2] = { 0x00,0x00 };
	cursor += size;
	memcpy(cursor, t, 2);
	Crc16(buffer + 2, size + 8, t);
	memcpy(cursor, t, 2);
	// 拼结束标志符
	cursor += 2;
	*cursor = CTRL_END;
	*length = size + 11;
}

void LED::Crc16(BYTE* buffer, int size, BYTE* crc)
{
	unsigned char temp_high = 0xFF, temp_low = 0xFF;
	int index = 0;
	for (int i = 0; i < size; i++)
	{
		index = (unsigned char)buffer[i] ^ temp_low;
		temp_low = temp_high ^ aucCRCHi[index];
		temp_high = aucCRCLo[index];
	}
	crc[0] = temp_high;
	crc[1] = temp_low;
}

void LED::ColoredDisplay(BYTE line_num, BYTE time, BYTE color, string context)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	data[size++] = line_num;
	data[size++] = time;
	data[size++] = color;
	data[size++] = 0x00;
	memcpy(data + size, context.c_str(), context.size());
	size += context.size();
	PackageCommand(COM_COLORED_DISPLAY, data, size, buffer_, &size_);
	delete[]data;
}

void LED::CancelDisplay(BYTE line_num)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	data[size++] = line_num;
	PackageCommand(COM_CANCEL_DISPLAY,data, size, buffer_, &size_);
	delete[]data;
}

void LED::TimeDisplay(BYTE line_num, BYTE color)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	data[size++] = line_num;
	data[size++] = color;
	data[size++] = 0x00;
	PackageCommand(COM_TIME_DISPLAY,data, size, buffer_, &size_);
	delete[]data;
}

void LED::SetTime(int* date)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	for (int i = 0; i < 6; i++)
	{
		data[size++] = date[i];
	}
	PackageCommand(COM_SET_TIME,data, size, buffer_, &size_);
	delete[]data;
}

void LED::SetCharColor(BYTE line_num, int *color)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	data[size++] = line_num;
	for (int i = 0; i < 8; i++)
	{
		data[size++] = color[i];
	}
	PackageCommand(COM_CHAR_COLOR,data, size, buffer_, &size_);
	delete[]data;
}

void LED::LineColorTrans(BYTE line_num)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	data[size++] = line_num;
	PackageCommand(COM_LINE_COLOR,data, size, buffer_, &size_);
	delete[]data;
}

void LED::CharColorTrans(BYTE line_num, int *color)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	data[size++] = line_num;
	for (int i = 0; i < 2; i++)
	{
		data[size++] = color[i];
	}
	PackageCommand(COM_COLOR_CHANGE,data, size, buffer_, &size_);
	delete[]data;
}

void LED::TimingDisplay(BYTE line_num, BYTE time, BYTE color, string context)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	data[size++] = line_num;
	data[size++] = time;
	data[size++] = color;
	data[size++] = 0x00;
	memcpy(data + size, context.c_str(), context.size());
	size += context.size();
	PackageCommand(COM_TIMING_DISPLAY,data, size, buffer_, &size_);
	delete[]data;
}

void LED::SetAdChangeMode(BYTE line_num,BYTE mode)
{
	int size = 0;
	BYTE* data = new BYTE[MAX_DATA_LEN];
	data[size++] = line_num;
	data[size++] = mode;
	PackageCommand(COM_ADPAGE_CHANGE,data, size, buffer_, &size_);
	delete[]data;
}

void LED::Send(BYTE* buffer, int* size)
{
	memcpy(buffer, buffer_, size_);
	*size = size_;
}